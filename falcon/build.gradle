plugins {
    id 'java'
    id 'maven'
    id 'com.palantir.git-version' version '0.10.0'
}

group = "com.falconcomputing.genomics"
final isRelease = project.hasProperty("release")
version = (isRelease ? gitVersion() : gitVersion() + "-SNAPSHOT").replaceAll(".dirty", "")

final has_cloud = project.hasProperty('cloud')
def cloud = findProperty('cloud') ?: ''
if (has_cloud) {
  version = version + "-" + cloud
}

compileJava {
    options.compilerArgs = ['-proc:none', '-Xlint:all','-Xdiags:verbose']
}

compileTestJava {
    options.compilerArgs = ['-proc:none', '-Xlint:all','-Xdiags:verbose']
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://artifactory.broadinstitute.org/artifactory/libs-snapshot/" }
}

dependencies {
    testCompile 'org.testng:testng:6.11'
    compile 'commons-io:commons-io:2.5'
    //this is a stable gatk version for cyclic depedency compile 'org.broadinstitute:gatk:4.0.6.0-193-g1fdfdf5-SNAPSHOT'
    compile 'org.broadinstitute:gatk:4.0.6.0-193-g1fdfdf5-SNAPSHOT'
    compile 'org.apache.logging.log4j:log4j-api:2.3'
    compile 'org.apache.logging.log4j:log4j-core:2.3'
    compile 'com.github.samtools:htsjdk:2.16.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}

//===================================================================
// build
//===================================================================
final nativeBuildDir = "src/main/c/build"

task createNativeDir(type: Exec) {
    commandLine 'mkdir', '-p', nativeBuildDir
    println "mkdir -p $nativeBuildDir"
}

task configNative(type: Exec) {
    workingDir nativeBuildDir

    if (isRelease) {
      commandLine 'cmake', '-DCMAKE_BUILD_TYPE=Release', "-DDEPLOYMENT=${cloud}", '..'
      println "cmake -DCMAKE_BUILD_TYPE=Release -DDEPLOYMENT=${cloud} .."
    }
    else {
      commandLine 'cmake', '-DCMAKE_BUILD_TYPE=Debug', "-DDEPLOYMENT=${cloud}", '..'
      println "cmake -DCMAKE_BUILD_TYPE=Debug -DDEPLOYMENT=${cloud} .."
    }
}

task buildNative(type: Exec) {
    workingDir nativeBuildDir
    commandLine 'make'
}

task copyNativeLib(type: Copy) {
    from "$nativeBuildDir"
    into "$buildDir/classes/main/com/falconcomputing/genomics/native"
    include '*.so*'
    println "cp $nativeBuildDir $buildDir/classes/main/com/falconcomputing/genomics/native"
}

task deleteNativeBuild(type: Delete) {
    delete nativeBuildDir
}

//===================================================================
// test
//===================================================================

test {
    useTestNG()
    testLogging.showStandardStreams = true

    // obtain test data

    // propagate system properties to test JVM
    systemProperties = System.getProperties()
    systemProperty "bqsr.reference", "ref.fa"
    systemProperty "bqsr.input_bam", "input-1.bam"
    systemProperty "bqsr.input_grp", "input-1.grp"

    exclude 'com/falconcomputing/genomics/bqsr/TestHelper'

    testLogging {
        if (!System.env.CI.toString().toBoolean()) {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

    // always rerun tests
    outputs.upToDateWhen { false }
}

task getTestData( type: Exec ) {
    configurations.testRuntime.files
    commandLine 'echo', 'Downloaded all dependencies'
    commandLine 'src/test/resources/com/falconcomputing/genomics/get-data.sh'
}

task htctest( type: Test ) {
    useTestNG()
    testLogging.showStandardStreams = true

    // propagate system properties to test JVM
    systemProperties = System.getProperties()
    systemProperty "bqsr.reference", "ref.fa"
    systemProperty "bqsr.input_bam", "input-1.bam"

    exclude 'com/falconcomputing/genomics/bqsr'

    // always rerun tests
    outputs.upToDateWhen { false }
}

task bqsrtest1( type: Test ) {
    useTestNG()
    testLogging.showStandardStreams = true
    systemProperty "bqsr.reference", "ref.fa"
    systemProperty "bqsr.input_bam", "input-1.bam"
    systemProperty "bqsr.input_grp", "input-1.grp"

    exclude 'com/falconcomputing/genomics/bqsr/TestHelper'
    exclude 'com/falconcomputing/genomics/haplotypecaller'

    // always rerun tests
    outputs.upToDateWhen { false }
}

task bqsrtest2( type: Test ) {
    useTestNG()
    testLogging.showStandardStreams = true
    systemProperty "bqsr.reference", "ref.fa"
    systemProperty "bqsr.input_bam", "input-2.bam"
    systemProperty "bqsr.input_grp", "input-2.grp"

    exclude 'com/falconcomputing/genomics/bqsr/TestHelper'
    exclude 'com/falconcomputing/genomics/haplotypecaller'

    // always rerun tests
    outputs.upToDateWhen { false }
}

task bqsrtest3( type: Test ) {
    useTestNG()
    testLogging.showStandardStreams = true
    systemProperty "bqsr.reference", "ref.fa"
    systemProperty "bqsr.input_bam", "input-3.bam"
    systemProperty "bqsr.input_grp", "input-3.grp"

    exclude 'com/falconcomputing/genomics/bqsr/TestHelper'
    exclude 'com/falconcomputing/genomics/haplotypecaller'

    // always rerun tests
    outputs.upToDateWhen { false }
}

task bqsrtest ( dependsOn: [bqsrtest1, bqsrtest2, bqsrtest3] ) {}
task runtests ( dependsOn: [bqsrtest, htctest] ) {}

//===================================================================
// release
//===================================================================

compileJava.dependsOn getTestData
compileJava.finalizedBy copyNativeLib
copyNativeLib.dependsOn buildNative
buildNative.dependsOn configNative
configNative.dependsOn createNativeDir

clean.doFirst {
  delete "${rootDir}/${nativeBuildDir}/"
  println "${rootDir}/${nativeBuildDir}/"
}

jar {
    baseName = "falcon-genomics"
    // include LICENSE file in jar
    // from "LICENSE"
    exclude "log4j2.xml"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives sourcesJar
}

install.doFirst { println "Version: $version" }
